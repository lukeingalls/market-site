generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["groupBy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Article {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  subtitle  String?    @db.VarChar(255)
  body      String
  published Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  url       String     @db.VarChar(75)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  views     View[]
  reactions Reaction[]

  @@map(name: "articles")
}

model Reaction {
  type      String  @db.VarChar(10)
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int


  @@id([articleId, userId])
  @@map(name: "reactions")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int        @id @default(autoincrement())
  firstName     String?    @db.VarChar(45)
  lastName      String?    @db.VarChar(45)
  name          String?    @db.VarChar(255)
  title         String?    @db.VarChar(255)
  bio           String?    @db.VarChar(255)
  email         String     @unique @db.VarChar(255)
  emailVerified DateTime?  @map(name: "email_verified")
  image         String?
  author        Boolean    @default(false)
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @default(now()) @map(name: "updated_at")
  articles      Article[]
  reactions     Reaction[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model View {
  ip        String  @unique @db.VarChar(15)
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  count     Int     @default(1)

  @@id([ip, articleId])
  @@map(name: "views")
}
